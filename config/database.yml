development:
  adapter: postgresql
  encoding: unicode
  database: oscks-development
  pool: 5
  port: 5432
  host: localhost  

test:
  adapter: postgresql
  encoding: unicode
  database: socks-test
  pool: 5
  port: 5432
  host: localhost 

# Here, we've defined separate database configurations for the development and test environments - we don't have to worry about configuring the production environment, as Heroku will handle that for us. We set the adapter option to postgresql to instruct Rails to use PostgreSQL as the database engine, rather than SQLite.


# It's actually possible to specify that we wish to use PostgreSQL as the database engine at the moment we create an application by passing the -d postgresql option:


# rails new foo -d postgresql -T
# This will set up the Gemfile and database.yml files for us appropriately. This is good practice for all our apps, anyway - it's always best to keep your production and development environments as similar as possible. This practice is known as dev/prod parity.


# -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   -

# # SQLite version 3.x
# #   gem install sqlite3
# #
# #   Ensure the SQLite 3 gem is defined in your Gemfile
# #   gem 'sqlite3'
# development:
#   adapter: postgresql
#   database: db/development.sqlite3
#   pool: 5
#   timeout: 5000

# # Warning: The database defined as "test" will be erased and
# # re-generated from your development database when you run "rake".
# # Do not set this db to the same as development or production.
# test:
#   adapter: sqlite3
#   database: db/test.sqlite3
#   pool: 5
#   timeout: 5000

# production:
#   adapter: sqlite3
#   database: db/production.sqlite3
#   pool: 5
#   timeout: 5000
